// Generated by CoffeeScript 1.10.0
(function() {
  var GL, S3, allofw, allofwutils, data, i, j, k, l, m, n, nav, omni, ref, ref1, ref2, ref3, ref4, ref5, render, size, t0, texts, timer, w;

  allofw = require("allofw");

  allofwutils = require("allofwutils");

  GL = allofw.GL3;

  w = new allofw.OpenGLWindow();

  w.makeContextCurrent();

  omni = new allofw.OmniStereo("allofw.yaml");

  nav = new allofwutils.WindowNavigation(w, omni);

  S3 = allofwutils.shape3d;

  data = [];

  size = 40;

  for (i = l = ref = -size, ref1 = size; ref <= ref1 ? l <= ref1 : l >= ref1; i = ref <= ref1 ? ++l : --l) {
    for (j = m = ref2 = -size, ref3 = size; ref2 <= ref3 ? m <= ref3 : m >= ref3; j = ref2 <= ref3 ? ++m : --m) {
      for (k = n = ref4 = -size, ref5 = size; ref4 <= ref5 ? n <= ref5 : n >= ref5; k = ref4 <= ref5 ? ++n : --n) {
        if (i !== 0 || j !== 0 || k !== 0) {
          data.push({
            x: i,
            y: j,
            z: k
          });
        }
      }
    }
  }

  texts = S3.texts().attr("vec3", "center", "v1").attr("vec3", "up", "vec3(0, 1, 0.001)").attr("vec3", "normal", "-vec3(cos(angle) * v1.x + sin(angle) * v1.z, v1.y, -sin(angle) * v1.x + cos(angle) * v1.z)").attr("float", "scale", "0.01 / 4").uniform("float", "angle", 0).variable("vec3", "v1", function(d) {
    return [d.x, d.y, d.z];
  }).text(function(data) {
    return Math.sin(data.x + data.y + data.z).toFixed(2);
  }).compile(omni).data(data);

  omni.onCaptureViewport(function() {
    GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);
    GL.enable(GL.BLEND);
    GL.blendFunc(GL.ONE, GL.ONE_MINUS_SRC_ALPHA);
    return texts.render(omni);
  });

  t0 = new Date().getTime() / 1000;

  console.log("Text count:", data.length);

  render = function() {
    var sz, time;
    time = new Date().getTime() / 1000 - t0;
    time *= 3;
    texts.uniform("float", "angle", time);
    omni.capture();
    sz = w.getFramebufferSize();
    omni.composite(0, 0, sz[0], sz[1]);
    return w.swapBuffers();
  };

  timer = setInterval(function() {
    nav.update();
    render();
    w.pollEvents();
    if (w.shouldClose()) {
      return clearInterval(timer);
    }
  });

  w.onClose(function() {
    return clearInterval(timer);
  });

}).call(this);
