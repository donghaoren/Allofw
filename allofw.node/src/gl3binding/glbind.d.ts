export let DEPTH_BUFFER_BIT: number;
export let STENCIL_BUFFER_BIT: number;
export let COLOR_BUFFER_BIT: number;
export let FALSE: number;
export let TRUE: number;
export let POINTS: number;
export let LINES: number;
export let LINE_LOOP: number;
export let LINE_STRIP: number;
export let TRIANGLES: number;
export let TRIANGLE_STRIP: number;
export let TRIANGLE_FAN: number;
export let NEVER: number;
export let LESS: number;
export let EQUAL: number;
export let LEQUAL: number;
export let GREATER: number;
export let NOTEQUAL: number;
export let GEQUAL: number;
export let ALWAYS: number;
export let ZERO: number;
export let ONE: number;
export let SRC_COLOR: number;
export let ONE_MINUS_SRC_COLOR: number;
export let SRC_ALPHA: number;
export let ONE_MINUS_SRC_ALPHA: number;
export let DST_ALPHA: number;
export let ONE_MINUS_DST_ALPHA: number;
export let DST_COLOR: number;
export let ONE_MINUS_DST_COLOR: number;
export let SRC_ALPHA_SATURATE: number;
export let NONE: number;
export let FRONT_LEFT: number;
export let FRONT_RIGHT: number;
export let BACK_LEFT: number;
export let BACK_RIGHT: number;
export let FRONT: number;
export let BACK: number;
export let LEFT: number;
export let RIGHT: number;
export let FRONT_AND_BACK: number;
export let NO_ERROR: number;
export let INVALID_ENUM: number;
export let INVALID_VALUE: number;
export let INVALID_OPERATION: number;
export let OUT_OF_MEMORY: number;
export let CW: number;
export let CCW: number;
export let POINT_SIZE: number;
export let POINT_SIZE_RANGE: number;
export let POINT_SIZE_GRANULARITY: number;
export let LINE_SMOOTH: number;
export let LINE_WIDTH: number;
export let LINE_WIDTH_RANGE: number;
export let LINE_WIDTH_GRANULARITY: number;
export let POLYGON_MODE: number;
export let POLYGON_SMOOTH: number;
export let CULL_FACE: number;
export let CULL_FACE_MODE: number;
export let FRONT_FACE: number;
export let DEPTH_RANGE: number;
export let DEPTH_TEST: number;
export let DEPTH_WRITEMASK: number;
export let DEPTH_CLEAR_VALUE: number;
export let DEPTH_FUNC: number;
export let STENCIL_TEST: number;
export let STENCIL_CLEAR_VALUE: number;
export let STENCIL_FUNC: number;
export let STENCIL_VALUE_MASK: number;
export let STENCIL_FAIL: number;
export let STENCIL_PASS_DEPTH_FAIL: number;
export let STENCIL_PASS_DEPTH_PASS: number;
export let STENCIL_REF: number;
export let STENCIL_WRITEMASK: number;
export let VIEWPORT: number;
export let DITHER: number;
export let BLEND_DST: number;
export let BLEND_SRC: number;
export let BLEND: number;
export let LOGIC_OP_MODE: number;
export let COLOR_LOGIC_OP: number;
export let DRAW_BUFFER: number;
export let READ_BUFFER: number;
export let SCISSOR_BOX: number;
export let SCISSOR_TEST: number;
export let COLOR_CLEAR_VALUE: number;
export let COLOR_WRITEMASK: number;
export let DOUBLEBUFFER: number;
export let STEREO: number;
export let LINE_SMOOTH_HINT: number;
export let POLYGON_SMOOTH_HINT: number;
export let UNPACK_SWAP_BYTES: number;
export let UNPACK_LSB_FIRST: number;
export let UNPACK_ROW_LENGTH: number;
export let UNPACK_SKIP_ROWS: number;
export let UNPACK_SKIP_PIXELS: number;
export let UNPACK_ALIGNMENT: number;
export let PACK_SWAP_BYTES: number;
export let PACK_LSB_FIRST: number;
export let PACK_ROW_LENGTH: number;
export let PACK_SKIP_ROWS: number;
export let PACK_SKIP_PIXELS: number;
export let PACK_ALIGNMENT: number;
export let MAX_TEXTURE_SIZE: number;
export let MAX_VIEWPORT_DIMS: number;
export let SUBPIXEL_BITS: number;
export let TEXTURE_1D: number;
export let TEXTURE_2D: number;
export let POLYGON_OFFSET_UNITS: number;
export let POLYGON_OFFSET_POINT: number;
export let POLYGON_OFFSET_LINE: number;
export let POLYGON_OFFSET_FILL: number;
export let POLYGON_OFFSET_FACTOR: number;
export let TEXTURE_BINDING_1D: number;
export let TEXTURE_BINDING_2D: number;
export let TEXTURE_WIDTH: number;
export let TEXTURE_HEIGHT: number;
export let TEXTURE_INTERNAL_FORMAT: number;
export let TEXTURE_BORDER_COLOR: number;
export let TEXTURE_RED_SIZE: number;
export let TEXTURE_GREEN_SIZE: number;
export let TEXTURE_BLUE_SIZE: number;
export let TEXTURE_ALPHA_SIZE: number;
export let DONT_CARE: number;
export let FASTEST: number;
export let NICEST: number;
export let BYTE: number;
export let UNSIGNED_BYTE: number;
export let SHORT: number;
export let UNSIGNED_SHORT: number;
export let INT: number;
export let UNSIGNED_INT: number;
export let FLOAT: number;
export let DOUBLE: number;
export let CLEAR: number;
export let AND: number;
export let AND_REVERSE: number;
export let COPY: number;
export let AND_INVERTED: number;
export let NOOP: number;
export let XOR: number;
export let OR: number;
export let NOR: number;
export let EQUIV: number;
export let INVERT: number;
export let OR_REVERSE: number;
export let COPY_INVERTED: number;
export let OR_INVERTED: number;
export let NAND: number;
export let SET: number;
export let TEXTURE: number;
export let COLOR: number;
export let DEPTH: number;
export let STENCIL: number;
export let STENCIL_INDEX: number;
export let DEPTH_COMPONENT: number;
export let RED: number;
export let GREEN: number;
export let BLUE: number;
export let ALPHA: number;
export let RGB: number;
export let RGBA: number;
export let POINT: number;
export let LINE: number;
export let FILL: number;
export let KEEP: number;
export let REPLACE: number;
export let INCR: number;
export let DECR: number;
export let VENDOR: number;
export let RENDERER: number;
export let VERSION: number;
export let EXTENSIONS: number;
export let NEAREST: number;
export let LINEAR: number;
export let NEAREST_MIPMAP_NEAREST: number;
export let LINEAR_MIPMAP_NEAREST: number;
export let NEAREST_MIPMAP_LINEAR: number;
export let LINEAR_MIPMAP_LINEAR: number;
export let TEXTURE_MAG_FILTER: number;
export let TEXTURE_MIN_FILTER: number;
export let TEXTURE_WRAP_S: number;
export let TEXTURE_WRAP_T: number;
export let PROXY_TEXTURE_1D: number;
export let PROXY_TEXTURE_2D: number;
export let REPEAT: number;
export let R3_G3_B2: number;
export let RGB4: number;
export let RGB5: number;
export let RGB8: number;
export let RGB10: number;
export let RGB12: number;
export let RGB16: number;
export let RGBA2: number;
export let RGBA4: number;
export let RGB5_A1: number;
export let RGBA8: number;
export let RGB10_A2: number;
export let RGBA12: number;
export let RGBA16: number;
export let UNSIGNED_BYTE_3_3_2: number;
export let UNSIGNED_SHORT_4_4_4_4: number;
export let UNSIGNED_SHORT_5_5_5_1: number;
export let UNSIGNED_INT_8_8_8_8: number;
export let UNSIGNED_INT_10_10_10_2: number;
export let TEXTURE_BINDING_3D: number;
export let PACK_SKIP_IMAGES: number;
export let PACK_IMAGE_HEIGHT: number;
export let UNPACK_SKIP_IMAGES: number;
export let UNPACK_IMAGE_HEIGHT: number;
export let TEXTURE_3D: number;
export let PROXY_TEXTURE_3D: number;
export let TEXTURE_DEPTH: number;
export let TEXTURE_WRAP_R: number;
export let MAX_3D_TEXTURE_SIZE: number;
export let UNSIGNED_BYTE_2_3_3_REV: number;
export let UNSIGNED_SHORT_5_6_5: number;
export let UNSIGNED_SHORT_5_6_5_REV: number;
export let UNSIGNED_SHORT_4_4_4_4_REV: number;
export let UNSIGNED_SHORT_1_5_5_5_REV: number;
export let UNSIGNED_INT_8_8_8_8_REV: number;
export let UNSIGNED_INT_2_10_10_10_REV: number;
export let BGR: number;
export let BGRA: number;
export let MAX_ELEMENTS_VERTICES: number;
export let MAX_ELEMENTS_INDICES: number;
export let CLAMP_TO_EDGE: number;
export let TEXTURE_MIN_LOD: number;
export let TEXTURE_MAX_LOD: number;
export let TEXTURE_BASE_LEVEL: number;
export let TEXTURE_MAX_LEVEL: number;
export let SMOOTH_POINT_SIZE_RANGE: number;
export let SMOOTH_POINT_SIZE_GRANULARITY: number;
export let SMOOTH_LINE_WIDTH_RANGE: number;
export let SMOOTH_LINE_WIDTH_GRANULARITY: number;
export let ALIASED_LINE_WIDTH_RANGE: number;
export let CONSTANT_COLOR: number;
export let ONE_MINUS_CONSTANT_COLOR: number;
export let CONSTANT_ALPHA: number;
export let ONE_MINUS_CONSTANT_ALPHA: number;
export let BLEND_COLOR: number;
export let FUNC_ADD: number;
export let MIN: number;
export let MAX: number;
export let BLEND_EQUATION: number;
export let FUNC_SUBTRACT: number;
export let FUNC_REVERSE_SUBTRACT: number;
export let TEXTURE0: number;
export let TEXTURE1: number;
export let TEXTURE2: number;
export let TEXTURE3: number;
export let TEXTURE4: number;
export let TEXTURE5: number;
export let TEXTURE6: number;
export let TEXTURE7: number;
export let TEXTURE8: number;
export let TEXTURE9: number;
export let TEXTURE10: number;
export let TEXTURE11: number;
export let TEXTURE12: number;
export let TEXTURE13: number;
export let TEXTURE14: number;
export let TEXTURE15: number;
export let TEXTURE16: number;
export let TEXTURE17: number;
export let TEXTURE18: number;
export let TEXTURE19: number;
export let TEXTURE20: number;
export let TEXTURE21: number;
export let TEXTURE22: number;
export let TEXTURE23: number;
export let TEXTURE24: number;
export let TEXTURE25: number;
export let TEXTURE26: number;
export let TEXTURE27: number;
export let TEXTURE28: number;
export let TEXTURE29: number;
export let TEXTURE30: number;
export let TEXTURE31: number;
export let ACTIVE_TEXTURE: number;
export let MULTISAMPLE: number;
export let SAMPLE_ALPHA_TO_COVERAGE: number;
export let SAMPLE_ALPHA_TO_ONE: number;
export let SAMPLE_COVERAGE: number;
export let SAMPLE_BUFFERS: number;
export let SAMPLES: number;
export let SAMPLE_COVERAGE_VALUE: number;
export let SAMPLE_COVERAGE_INVERT: number;
export let TEXTURE_CUBE_MAP: number;
export let TEXTURE_BINDING_CUBE_MAP: number;
export let TEXTURE_CUBE_MAP_POSITIVE_X: number;
export let TEXTURE_CUBE_MAP_NEGATIVE_X: number;
export let TEXTURE_CUBE_MAP_POSITIVE_Y: number;
export let TEXTURE_CUBE_MAP_NEGATIVE_Y: number;
export let TEXTURE_CUBE_MAP_POSITIVE_Z: number;
export let TEXTURE_CUBE_MAP_NEGATIVE_Z: number;
export let PROXY_TEXTURE_CUBE_MAP: number;
export let MAX_CUBE_MAP_TEXTURE_SIZE: number;
export let COMPRESSED_RGB: number;
export let COMPRESSED_RGBA: number;
export let TEXTURE_COMPRESSION_HINT: number;
export let TEXTURE_COMPRESSED_IMAGE_SIZE: number;
export let TEXTURE_COMPRESSED: number;
export let NUM_COMPRESSED_TEXTURE_FORMATS: number;
export let COMPRESSED_TEXTURE_FORMATS: number;
export let CLAMP_TO_BORDER: number;
export let BLEND_DST_RGB: number;
export let BLEND_SRC_RGB: number;
export let BLEND_DST_ALPHA: number;
export let BLEND_SRC_ALPHA: number;
export let POINT_FADE_THRESHOLD_SIZE: number;
export let DEPTH_COMPONENT16: number;
export let DEPTH_COMPONENT24: number;
export let DEPTH_COMPONENT32: number;
export let MIRRORED_REPEAT: number;
export let MAX_TEXTURE_LOD_BIAS: number;
export let TEXTURE_LOD_BIAS: number;
export let INCR_WRAP: number;
export let DECR_WRAP: number;
export let TEXTURE_DEPTH_SIZE: number;
export let TEXTURE_COMPARE_MODE: number;
export let TEXTURE_COMPARE_FUNC: number;
export let BUFFER_SIZE: number;
export let BUFFER_USAGE: number;
export let QUERY_COUNTER_BITS: number;
export let CURRENT_QUERY: number;
export let QUERY_RESULT: number;
export let QUERY_RESULT_AVAILABLE: number;
export let ARRAY_BUFFER: number;
export let ELEMENT_ARRAY_BUFFER: number;
export let ARRAY_BUFFER_BINDING: number;
export let ELEMENT_ARRAY_BUFFER_BINDING: number;
export let VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: number;
export let READ_ONLY: number;
export let WRITE_ONLY: number;
export let READ_WRITE: number;
export let BUFFER_ACCESS: number;
export let BUFFER_MAPPED: number;
export let BUFFER_MAP_POINTER: number;
export let STREAM_DRAW: number;
export let STREAM_READ: number;
export let STREAM_COPY: number;
export let STATIC_DRAW: number;
export let STATIC_READ: number;
export let STATIC_COPY: number;
export let DYNAMIC_DRAW: number;
export let DYNAMIC_READ: number;
export let DYNAMIC_COPY: number;
export let SAMPLES_PASSED: number;
export let BLEND_EQUATION_RGB: number;
export let VERTEX_ATTRIB_ARRAY_ENABLED: number;
export let VERTEX_ATTRIB_ARRAY_SIZE: number;
export let VERTEX_ATTRIB_ARRAY_STRIDE: number;
export let VERTEX_ATTRIB_ARRAY_TYPE: number;
export let CURRENT_VERTEX_ATTRIB: number;
export let VERTEX_PROGRAM_POINT_SIZE: number;
export let VERTEX_ATTRIB_ARRAY_POINTER: number;
export let STENCIL_BACK_FUNC: number;
export let STENCIL_BACK_FAIL: number;
export let STENCIL_BACK_PASS_DEPTH_FAIL: number;
export let STENCIL_BACK_PASS_DEPTH_PASS: number;
export let MAX_DRAW_BUFFERS: number;
export let DRAW_BUFFER0: number;
export let DRAW_BUFFER1: number;
export let DRAW_BUFFER2: number;
export let DRAW_BUFFER3: number;
export let DRAW_BUFFER4: number;
export let DRAW_BUFFER5: number;
export let DRAW_BUFFER6: number;
export let DRAW_BUFFER7: number;
export let DRAW_BUFFER8: number;
export let DRAW_BUFFER9: number;
export let DRAW_BUFFER10: number;
export let DRAW_BUFFER11: number;
export let DRAW_BUFFER12: number;
export let DRAW_BUFFER13: number;
export let DRAW_BUFFER14: number;
export let DRAW_BUFFER15: number;
export let BLEND_EQUATION_ALPHA: number;
export let MAX_VERTEX_ATTRIBS: number;
export let VERTEX_ATTRIB_ARRAY_NORMALIZED: number;
export let MAX_TEXTURE_IMAGE_UNITS: number;
export let FRAGMENT_SHADER: number;
export let VERTEX_SHADER: number;
export let MAX_FRAGMENT_UNIFORM_COMPONENTS: number;
export let MAX_VERTEX_UNIFORM_COMPONENTS: number;
export let MAX_VARYING_FLOATS: number;
export let MAX_VERTEX_TEXTURE_IMAGE_UNITS: number;
export let MAX_COMBINED_TEXTURE_IMAGE_UNITS: number;
export let SHADER_TYPE: number;
export let FLOAT_VEC2: number;
export let FLOAT_VEC3: number;
export let FLOAT_VEC4: number;
export let INT_VEC2: number;
export let INT_VEC3: number;
export let INT_VEC4: number;
export let BOOL: number;
export let BOOL_VEC2: number;
export let BOOL_VEC3: number;
export let BOOL_VEC4: number;
export let FLOAT_MAT2: number;
export let FLOAT_MAT3: number;
export let FLOAT_MAT4: number;
export let SAMPLER_1D: number;
export let SAMPLER_2D: number;
export let SAMPLER_3D: number;
export let SAMPLER_CUBE: number;
export let SAMPLER_1D_SHADOW: number;
export let SAMPLER_2D_SHADOW: number;
export let DELETE_STATUS: number;
export let COMPILE_STATUS: number;
export let LINK_STATUS: number;
export let VALIDATE_STATUS: number;
export let INFO_LOG_LENGTH: number;
export let ATTACHED_SHADERS: number;
export let ACTIVE_UNIFORMS: number;
export let ACTIVE_UNIFORM_MAX_LENGTH: number;
export let SHADER_SOURCE_LENGTH: number;
export let ACTIVE_ATTRIBUTES: number;
export let ACTIVE_ATTRIBUTE_MAX_LENGTH: number;
export let FRAGMENT_SHADER_DERIVATIVE_HINT: number;
export let SHADING_LANGUAGE_VERSION: number;
export let CURRENT_PROGRAM: number;
export let POINT_SPRITE_COORD_ORIGIN: number;
export let LOWER_LEFT: number;
export let UPPER_LEFT: number;
export let STENCIL_BACK_REF: number;
export let STENCIL_BACK_VALUE_MASK: number;
export let STENCIL_BACK_WRITEMASK: number;
export let PIXEL_PACK_BUFFER: number;
export let PIXEL_UNPACK_BUFFER: number;
export let PIXEL_PACK_BUFFER_BINDING: number;
export let PIXEL_UNPACK_BUFFER_BINDING: number;
export let FLOAT_MAT2x3: number;
export let FLOAT_MAT2x4: number;
export let FLOAT_MAT3x2: number;
export let FLOAT_MAT3x4: number;
export let FLOAT_MAT4x2: number;
export let FLOAT_MAT4x3: number;
export let SRGB: number;
export let SRGB8: number;
export let SRGB_ALPHA: number;
export let SRGB8_ALPHA8: number;
export let COMPRESSED_SRGB: number;
export let COMPRESSED_SRGB_ALPHA: number;
export let COMPARE_REF_TO_TEXTURE: number;
export let CLIP_DISTANCE0: number;
export let CLIP_DISTANCE1: number;
export let CLIP_DISTANCE2: number;
export let CLIP_DISTANCE3: number;
export let CLIP_DISTANCE4: number;
export let CLIP_DISTANCE5: number;
export let MAX_CLIP_DISTANCES: number;
export let MAJOR_VERSION: number;
export let MINOR_VERSION: number;
export let NUM_EXTENSIONS: number;
export let CONTEXT_FLAGS: number;
export let COMPRESSED_RED: number;
export let COMPRESSED_RG: number;
export let CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT: number;
export let RGBA32F: number;
export let RGB32F: number;
export let RGBA16F: number;
export let RGB16F: number;
export let VERTEX_ATTRIB_ARRAY_INTEGER: number;
export let MAX_ARRAY_TEXTURE_LAYERS: number;
export let MIN_PROGRAM_TEXEL_OFFSET: number;
export let MAX_PROGRAM_TEXEL_OFFSET: number;
export let CLAMP_READ_COLOR: number;
export let FIXED_ONLY: number;
export let MAX_VARYING_COMPONENTS: number;
export let TEXTURE_1D_ARRAY: number;
export let PROXY_TEXTURE_1D_ARRAY: number;
export let TEXTURE_2D_ARRAY: number;
export let PROXY_TEXTURE_2D_ARRAY: number;
export let TEXTURE_BINDING_1D_ARRAY: number;
export let TEXTURE_BINDING_2D_ARRAY: number;
export let R11F_G11F_B10F: number;
export let UNSIGNED_INT_10F_11F_11F_REV: number;
export let RGB9_E5: number;
export let UNSIGNED_INT_5_9_9_9_REV: number;
export let TEXTURE_SHARED_SIZE: number;
export let TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH: number;
export let TRANSFORM_FEEDBACK_BUFFER_MODE: number;
export let MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: number;
export let TRANSFORM_FEEDBACK_VARYINGS: number;
export let TRANSFORM_FEEDBACK_BUFFER_START: number;
export let TRANSFORM_FEEDBACK_BUFFER_SIZE: number;
export let PRIMITIVES_GENERATED: number;
export let TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: number;
export let RASTERIZER_DISCARD: number;
export let MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: number;
export let MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: number;
export let INTERLEAVED_ATTRIBS: number;
export let SEPARATE_ATTRIBS: number;
export let TRANSFORM_FEEDBACK_BUFFER: number;
export let TRANSFORM_FEEDBACK_BUFFER_BINDING: number;
export let RGBA32UI: number;
export let RGB32UI: number;
export let RGBA16UI: number;
export let RGB16UI: number;
export let RGBA8UI: number;
export let RGB8UI: number;
export let RGBA32I: number;
export let RGB32I: number;
export let RGBA16I: number;
export let RGB16I: number;
export let RGBA8I: number;
export let RGB8I: number;
export let RED_INTEGER: number;
export let GREEN_INTEGER: number;
export let BLUE_INTEGER: number;
export let RGB_INTEGER: number;
export let RGBA_INTEGER: number;
export let BGR_INTEGER: number;
export let BGRA_INTEGER: number;
export let SAMPLER_1D_ARRAY: number;
export let SAMPLER_2D_ARRAY: number;
export let SAMPLER_1D_ARRAY_SHADOW: number;
export let SAMPLER_2D_ARRAY_SHADOW: number;
export let SAMPLER_CUBE_SHADOW: number;
export let UNSIGNED_INT_VEC2: number;
export let UNSIGNED_INT_VEC3: number;
export let UNSIGNED_INT_VEC4: number;
export let INT_SAMPLER_1D: number;
export let INT_SAMPLER_2D: number;
export let INT_SAMPLER_3D: number;
export let INT_SAMPLER_CUBE: number;
export let INT_SAMPLER_1D_ARRAY: number;
export let INT_SAMPLER_2D_ARRAY: number;
export let UNSIGNED_INT_SAMPLER_1D: number;
export let UNSIGNED_INT_SAMPLER_2D: number;
export let UNSIGNED_INT_SAMPLER_3D: number;
export let UNSIGNED_INT_SAMPLER_CUBE: number;
export let UNSIGNED_INT_SAMPLER_1D_ARRAY: number;
export let UNSIGNED_INT_SAMPLER_2D_ARRAY: number;
export let QUERY_WAIT: number;
export let QUERY_NO_WAIT: number;
export let QUERY_BY_REGION_WAIT: number;
export let QUERY_BY_REGION_NO_WAIT: number;
export let BUFFER_ACCESS_FLAGS: number;
export let BUFFER_MAP_LENGTH: number;
export let BUFFER_MAP_OFFSET: number;
export let SAMPLER_2D_RECT: number;
export let SAMPLER_2D_RECT_SHADOW: number;
export let SAMPLER_BUFFER: number;
export let INT_SAMPLER_2D_RECT: number;
export let INT_SAMPLER_BUFFER: number;
export let UNSIGNED_INT_SAMPLER_2D_RECT: number;
export let UNSIGNED_INT_SAMPLER_BUFFER: number;
export let TEXTURE_BUFFER: number;
export let MAX_TEXTURE_BUFFER_SIZE: number;
export let TEXTURE_BINDING_BUFFER: number;
export let TEXTURE_BUFFER_DATA_STORE_BINDING: number;
export let TEXTURE_RECTANGLE: number;
export let TEXTURE_BINDING_RECTANGLE: number;
export let PROXY_TEXTURE_RECTANGLE: number;
export let MAX_RECTANGLE_TEXTURE_SIZE: number;
export let R8_SNORM: number;
export let RG8_SNORM: number;
export let RGB8_SNORM: number;
export let RGBA8_SNORM: number;
export let R16_SNORM: number;
export let RG16_SNORM: number;
export let RGB16_SNORM: number;
export let RGBA16_SNORM: number;
export let SIGNED_NORMALIZED: number;
export let PRIMITIVE_RESTART: number;
export let PRIMITIVE_RESTART_INDEX: number;
export let CONTEXT_CORE_PROFILE_BIT: number;
export let CONTEXT_COMPATIBILITY_PROFILE_BIT: number;
export let LINES_ADJACENCY: number;
export let LINE_STRIP_ADJACENCY: number;
export let TRIANGLES_ADJACENCY: number;
export let TRIANGLE_STRIP_ADJACENCY: number;
export let PROGRAM_POINT_SIZE: number;
export let MAX_GEOMETRY_TEXTURE_IMAGE_UNITS: number;
export let FRAMEBUFFER_ATTACHMENT_LAYERED: number;
export let FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS: number;
export let GEOMETRY_SHADER: number;
export let GEOMETRY_VERTICES_OUT: number;
export let GEOMETRY_INPUT_TYPE: number;
export let GEOMETRY_OUTPUT_TYPE: number;
export let MAX_GEOMETRY_UNIFORM_COMPONENTS: number;
export let MAX_GEOMETRY_OUTPUT_VERTICES: number;
export let MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS: number;
export let MAX_VERTEX_OUTPUT_COMPONENTS: number;
export let MAX_GEOMETRY_INPUT_COMPONENTS: number;
export let MAX_GEOMETRY_OUTPUT_COMPONENTS: number;
export let MAX_FRAGMENT_INPUT_COMPONENTS: number;
export let CONTEXT_PROFILE_MASK: number;
export let VERTEX_ATTRIB_ARRAY_DIVISOR: number;
export let SAMPLE_SHADING: number;
export let MIN_SAMPLE_SHADING_VALUE: number;
export let MIN_PROGRAM_TEXTURE_GATHER_OFFSET: number;
export let MAX_PROGRAM_TEXTURE_GATHER_OFFSET: number;
export let TEXTURE_CUBE_MAP_ARRAY: number;
export let TEXTURE_BINDING_CUBE_MAP_ARRAY: number;
export let PROXY_TEXTURE_CUBE_MAP_ARRAY: number;
export let SAMPLER_CUBE_MAP_ARRAY: number;
export let SAMPLER_CUBE_MAP_ARRAY_SHADOW: number;
export let INT_SAMPLER_CUBE_MAP_ARRAY: number;
export let UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY: number;
export let DEPTH_COMPONENT32F: number;
export let DEPTH32F_STENCIL8: number;
export let FLOAT_32_UNSIGNED_INT_24_8_REV: number;
export let INVALID_FRAMEBUFFER_OPERATION: number;
export let FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: number;
export let FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: number;
export let FRAMEBUFFER_ATTACHMENT_RED_SIZE: number;
export let FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: number;
export let FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: number;
export let FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: number;
export let FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: number;
export let FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: number;
export let FRAMEBUFFER_DEFAULT: number;
export let FRAMEBUFFER_UNDEFINED: number;
export let DEPTH_STENCIL_ATTACHMENT: number;
export let MAX_RENDERBUFFER_SIZE: number;
export let DEPTH_STENCIL: number;
export let UNSIGNED_INT_24_8: number;
export let DEPTH24_STENCIL8: number;
export let TEXTURE_STENCIL_SIZE: number;
export let TEXTURE_RED_TYPE: number;
export let TEXTURE_GREEN_TYPE: number;
export let TEXTURE_BLUE_TYPE: number;
export let TEXTURE_ALPHA_TYPE: number;
export let TEXTURE_DEPTH_TYPE: number;
export let UNSIGNED_NORMALIZED: number;
export let FRAMEBUFFER_BINDING: number;
export let RENDERBUFFER_BINDING: number;
export let READ_FRAMEBUFFER: number;
export let DRAW_FRAMEBUFFER: number;
export let READ_FRAMEBUFFER_BINDING: number;
export let RENDERBUFFER_SAMPLES: number;
export let FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: number;
export let FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: number;
export let FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: number;
export let FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: number;
export let FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: number;
export let FRAMEBUFFER_COMPLETE: number;
export let FRAMEBUFFER_INCOMPLETE_ATTACHMENT: number;
export let FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: number;
export let FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER: number;
export let FRAMEBUFFER_INCOMPLETE_READ_BUFFER: number;
export let FRAMEBUFFER_UNSUPPORTED: number;
export let MAX_COLOR_ATTACHMENTS: number;
export let COLOR_ATTACHMENT0: number;
export let COLOR_ATTACHMENT1: number;
export let COLOR_ATTACHMENT2: number;
export let COLOR_ATTACHMENT3: number;
export let COLOR_ATTACHMENT4: number;
export let COLOR_ATTACHMENT5: number;
export let COLOR_ATTACHMENT6: number;
export let COLOR_ATTACHMENT7: number;
export let COLOR_ATTACHMENT8: number;
export let COLOR_ATTACHMENT9: number;
export let COLOR_ATTACHMENT10: number;
export let COLOR_ATTACHMENT11: number;
export let COLOR_ATTACHMENT12: number;
export let COLOR_ATTACHMENT13: number;
export let COLOR_ATTACHMENT14: number;
export let COLOR_ATTACHMENT15: number;
export let DEPTH_ATTACHMENT: number;
export let STENCIL_ATTACHMENT: number;
export let FRAMEBUFFER: number;
export let RENDERBUFFER: number;
export let RENDERBUFFER_WIDTH: number;
export let RENDERBUFFER_HEIGHT: number;
export let RENDERBUFFER_INTERNAL_FORMAT: number;
export let STENCIL_INDEX1: number;
export let STENCIL_INDEX4: number;
export let STENCIL_INDEX8: number;
export let STENCIL_INDEX16: number;
export let RENDERBUFFER_RED_SIZE: number;
export let RENDERBUFFER_GREEN_SIZE: number;
export let RENDERBUFFER_BLUE_SIZE: number;
export let RENDERBUFFER_ALPHA_SIZE: number;
export let RENDERBUFFER_DEPTH_SIZE: number;
export let RENDERBUFFER_STENCIL_SIZE: number;
export let FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: number;
export let MAX_SAMPLES: number;
export let FRAMEBUFFER_SRGB: number;
export let HALF_FLOAT: number;
export let MAP_READ_BIT: number;
export let MAP_WRITE_BIT: number;
export let MAP_INVALIDATE_RANGE_BIT: number;
export let MAP_INVALIDATE_BUFFER_BIT: number;
export let MAP_FLUSH_EXPLICIT_BIT: number;
export let MAP_UNSYNCHRONIZED_BIT: number;
export let COMPRESSED_RED_RGTC1: number;
export let COMPRESSED_SIGNED_RED_RGTC1: number;
export let COMPRESSED_RG_RGTC2: number;
export let COMPRESSED_SIGNED_RG_RGTC2: number;
export let RG: number;
export let RG_INTEGER: number;
export let R8: number;
export let R16: number;
export let RG8: number;
export let RG16: number;
export let R16F: number;
export let R32F: number;
export let RG16F: number;
export let RG32F: number;
export let R8I: number;
export let R8UI: number;
export let R16I: number;
export let R16UI: number;
export let R32I: number;
export let R32UI: number;
export let RG8I: number;
export let RG8UI: number;
export let RG16I: number;
export let RG16UI: number;
export let RG32I: number;
export let RG32UI: number;
export let VERTEX_ARRAY_BINDING: number;
export let UNIFORM_BUFFER: number;
export let UNIFORM_BUFFER_BINDING: number;
export let UNIFORM_BUFFER_START: number;
export let UNIFORM_BUFFER_SIZE: number;
export let MAX_VERTEX_UNIFORM_BLOCKS: number;
export let MAX_GEOMETRY_UNIFORM_BLOCKS: number;
export let MAX_FRAGMENT_UNIFORM_BLOCKS: number;
export let MAX_COMBINED_UNIFORM_BLOCKS: number;
export let MAX_UNIFORM_BUFFER_BINDINGS: number;
export let MAX_UNIFORM_BLOCK_SIZE: number;
export let MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: number;
export let MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS: number;
export let MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: number;
export let UNIFORM_BUFFER_OFFSET_ALIGNMENT: number;
export let ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH: number;
export let ACTIVE_UNIFORM_BLOCKS: number;
export let UNIFORM_TYPE: number;
export let UNIFORM_SIZE: number;
export let UNIFORM_NAME_LENGTH: number;
export let UNIFORM_BLOCK_INDEX: number;
export let UNIFORM_OFFSET: number;
export let UNIFORM_ARRAY_STRIDE: number;
export let UNIFORM_MATRIX_STRIDE: number;
export let UNIFORM_IS_ROW_MAJOR: number;
export let UNIFORM_BLOCK_BINDING: number;
export let UNIFORM_BLOCK_DATA_SIZE: number;
export let UNIFORM_BLOCK_NAME_LENGTH: number;
export let UNIFORM_BLOCK_ACTIVE_UNIFORMS: number;
export let UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: number;
export let UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: number;
export let UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER: number;
export let UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: number;
export let COPY_READ_BUFFER: number;
export let COPY_WRITE_BUFFER: number;
export let DEPTH_CLAMP: number;
export let FIRST_VERTEX_CONVENTION: number;
export let LAST_VERTEX_CONVENTION: number;
export let PROVOKING_VERTEX: number;
export let TEXTURE_CUBE_MAP_SEAMLESS: number;
export let MAX_SERVER_WAIT_TIMEOUT: number;
export let OBJECT_TYPE: number;
export let SYNC_CONDITION: number;
export let SYNC_STATUS: number;
export let SYNC_FLAGS: number;
export let SYNC_FENCE: number;
export let SYNC_GPU_COMMANDS_COMPLETE: number;
export let UNSIGNALED: number;
export let SIGNALED: number;
export let ALREADY_SIGNALED: number;
export let TIMEOUT_EXPIRED: number;
export let CONDITION_SATISFIED: number;
export let WAIT_FAILED: number;
export let SYNC_FLUSH_COMMANDS_BIT: number;
export let SAMPLE_POSITION: number;
export let SAMPLE_MASK: number;
export let SAMPLE_MASK_VALUE: number;
export let MAX_SAMPLE_MASK_WORDS: number;
export let TEXTURE_2D_MULTISAMPLE: number;
export let PROXY_TEXTURE_2D_MULTISAMPLE: number;
export let TEXTURE_2D_MULTISAMPLE_ARRAY: number;
export let PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY: number;
export let TEXTURE_BINDING_2D_MULTISAMPLE: number;
export let TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY: number;
export let TEXTURE_SAMPLES: number;
export let TEXTURE_FIXED_SAMPLE_LOCATIONS: number;
export let SAMPLER_2D_MULTISAMPLE: number;
export let INT_SAMPLER_2D_MULTISAMPLE: number;
export let UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE: number;
export let SAMPLER_2D_MULTISAMPLE_ARRAY: number;
export let INT_SAMPLER_2D_MULTISAMPLE_ARRAY: number;
export let UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY: number;
export let MAX_COLOR_TEXTURE_SAMPLES: number;
export let MAX_DEPTH_TEXTURE_SAMPLES: number;
export let MAX_INTEGER_SAMPLES: number;
export let SRC1_COLOR: number;
export let SRC1_ALPHA: number;
export let ONE_MINUS_SRC1_COLOR: number;
export let ONE_MINUS_SRC1_ALPHA: number;
export let MAX_DUAL_SOURCE_DRAW_BUFFERS: number;
export let ANY_SAMPLES_PASSED: number;
export let SAMPLER_BINDING: number;
export let RGB10_A2UI: number;
export let TEXTURE_SWIZZLE_R: number;
export let TEXTURE_SWIZZLE_G: number;
export let TEXTURE_SWIZZLE_B: number;
export let TEXTURE_SWIZZLE_A: number;
export let TEXTURE_SWIZZLE_RGBA: number;
export let TIME_ELAPSED: number;
export let TIMESTAMP: number;
export let INT_2_10_10_10_REV: number;
export let DRAW_INDIRECT_BUFFER: number;
export let DRAW_INDIRECT_BUFFER_BINDING: number;
export let GEOMETRY_SHADER_INVOCATIONS: number;
export let MAX_GEOMETRY_SHADER_INVOCATIONS: number;
export let MIN_FRAGMENT_INTERPOLATION_OFFSET: number;
export let MAX_FRAGMENT_INTERPOLATION_OFFSET: number;
export let FRAGMENT_INTERPOLATION_OFFSET_BITS: number;
export let DOUBLE_VEC2: number;
export let DOUBLE_VEC3: number;
export let DOUBLE_VEC4: number;
export let DOUBLE_MAT2: number;
export let DOUBLE_MAT3: number;
export let DOUBLE_MAT4: number;
export let DOUBLE_MAT2x3: number;
export let DOUBLE_MAT2x4: number;
export let DOUBLE_MAT3x2: number;
export let DOUBLE_MAT3x4: number;
export let DOUBLE_MAT4x2: number;
export let DOUBLE_MAT4x3: number;
export let ACTIVE_SUBROUTINES: number;
export let ACTIVE_SUBROUTINE_UNIFORMS: number;
export let ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS: number;
export let ACTIVE_SUBROUTINE_MAX_LENGTH: number;
export let ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH: number;
export let MAX_SUBROUTINES: number;
export let MAX_SUBROUTINE_UNIFORM_LOCATIONS: number;
export let NUM_COMPATIBLE_SUBROUTINES: number;
export let COMPATIBLE_SUBROUTINES: number;
export let PATCHES: number;
export let PATCH_VERTICES: number;
export let PATCH_DEFAULT_INNER_LEVEL: number;
export let PATCH_DEFAULT_OUTER_LEVEL: number;
export let TESS_CONTROL_OUTPUT_VERTICES: number;
export let TESS_GEN_MODE: number;
export let TESS_GEN_SPACING: number;
export let TESS_GEN_VERTEX_ORDER: number;
export let TESS_GEN_POINT_MODE: number;
export let QUADS: number;
export let ISOLINES: number;
export let FRACTIONAL_ODD: number;
export let FRACTIONAL_EVEN: number;
export let MAX_PATCH_VERTICES: number;
export let MAX_TESS_GEN_LEVEL: number;
export let MAX_TESS_CONTROL_UNIFORM_COMPONENTS: number;
export let MAX_TESS_EVALUATION_UNIFORM_COMPONENTS: number;
export let MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS: number;
export let MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS: number;
export let MAX_TESS_CONTROL_OUTPUT_COMPONENTS: number;
export let MAX_TESS_PATCH_COMPONENTS: number;
export let MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS: number;
export let MAX_TESS_EVALUATION_OUTPUT_COMPONENTS: number;
export let MAX_TESS_CONTROL_UNIFORM_BLOCKS: number;
export let MAX_TESS_EVALUATION_UNIFORM_BLOCKS: number;
export let MAX_TESS_CONTROL_INPUT_COMPONENTS: number;
export let MAX_TESS_EVALUATION_INPUT_COMPONENTS: number;
export let MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS: number;
export let MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS: number;
export let UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER: number;
export let UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER: number;
export let TESS_EVALUATION_SHADER: number;
export let TESS_CONTROL_SHADER: number;
export let TRANSFORM_FEEDBACK: number;
export let TRANSFORM_FEEDBACK_BUFFER_PAUSED: number;
export let TRANSFORM_FEEDBACK_BUFFER_ACTIVE: number;
export let TRANSFORM_FEEDBACK_BINDING: number;
export let MAX_TRANSFORM_FEEDBACK_BUFFERS: number;
export let MAX_VERTEX_STREAMS: number;
export let FIXED: number;
export let IMPLEMENTATION_COLOR_READ_TYPE: number;
export let IMPLEMENTATION_COLOR_READ_FORMAT: number;
export let LOW_FLOAT: number;
export let MEDIUM_FLOAT: number;
export let HIGH_FLOAT: number;
export let LOW_INT: number;
export let MEDIUM_INT: number;
export let HIGH_INT: number;
export let SHADER_COMPILER: number;
export let SHADER_BINARY_FORMATS: number;
export let NUM_SHADER_BINARY_FORMATS: number;
export let MAX_VERTEX_UNIFORM_VECTORS: number;
export let MAX_VARYING_VECTORS: number;
export let MAX_FRAGMENT_UNIFORM_VECTORS: number;
export let RGB565: number;
export let PROGRAM_BINARY_RETRIEVABLE_HINT: number;
export let PROGRAM_BINARY_LENGTH: number;
export let NUM_PROGRAM_BINARY_FORMATS: number;
export let PROGRAM_BINARY_FORMATS: number;
export let VERTEX_SHADER_BIT: number;
export let FRAGMENT_SHADER_BIT: number;
export let GEOMETRY_SHADER_BIT: number;
export let TESS_CONTROL_SHADER_BIT: number;
export let TESS_EVALUATION_SHADER_BIT: number;
export let ALL_SHADER_BITS: number;
export let PROGRAM_SEPARABLE: number;
export let ACTIVE_PROGRAM: number;
export let PROGRAM_PIPELINE_BINDING: number;
export let MAX_VIEWPORTS: number;
export let VIEWPORT_SUBPIXEL_BITS: number;
export let VIEWPORT_BOUNDS_RANGE: number;
export let LAYER_PROVOKING_VERTEX: number;
export let VIEWPORT_INDEX_PROVOKING_VERTEX: number;
export let UNDEFINED_VERTEX: number;
export let DEPTH_BOUNDS_TEST_EXT: number;
export let DEPTH_BOUNDS_EXT: number;
export let SCALED_RESOLVE_FASTEST_EXT: number;
export let SCALED_RESOLVE_NICEST_EXT: number;
export let COMPRESSED_RGB_S3TC_DXT1_EXT: number;
export let COMPRESSED_RGBA_S3TC_DXT1_EXT: number;
export let COMPRESSED_RGBA_S3TC_DXT3_EXT: number;
export let COMPRESSED_RGBA_S3TC_DXT5_EXT: number;
export let COMPRESSED_SRGB_S3TC_DXT1_EXT: number;
export let COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT: number;
export let COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT: number;
export let COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT: number;
export let TEXTURE_MAX_ANISOTROPY_EXT: number;
export let MAX_TEXTURE_MAX_ANISOTROPY_EXT: number;
export let MIRROR_CLAMP_EXT: number;
export let MIRROR_CLAMP_TO_EDGE_EXT: number;
export let MIRROR_CLAMP_TO_BORDER_EXT: number;
export let TEXTURE_SRGB_DECODE_EXT: number;
export let DECODE_EXT: number;
export let SKIP_DECODE_EXT: number;
function cullFace(mode: number): void;
function frontFace(mode: number): void;
function hint(target: number, mode: number): void;
function lineWidth(width: number): void;
function pointSize(size: number): void;
function polygonMode(face: number, mode: number): void;
function scissor(x: number, y: number, width: number, height: number): void;
function texParameterf(target: number, pname: number, param: number): void;
function texParameterfv(target: number, pname: number, params: Buffer | string | number | number[]): void;
function texParameteri(target: number, pname: number, param: number): void;
function texParameteriv(target: number, pname: number, params: Buffer | string | number | number[]): void;
function texImage1D(target: number, level: number, internalformat: number, width: number, border: number, format: number, type: number, pixels: Buffer | string | number | number[]): void;
function texImage2D(target: number, level: number, internalformat: number, width: number, height: number, border: number, format: number, type: number, pixels: Buffer | string | number | number[]): void;
function drawBuffer(mode: number): void;
function clear(mask: number): void;
function clearColor(red: number, green: number, blue: number, alpha: number): void;
function clearStencil(s: number): void;
function clearDepth(depth: number): void;
function stencilMask(mask: number): void;
function colorMask(red: number, green: number, blue: number, alpha: number): void;
function depthMask(flag: number): void;
function disable(cap: number): void;
function enable(cap: number): void;
function finish(): void;
function flush(): void;
function blendFunc(sfactor: number, dfactor: number): void;
function logicOp(opcode: number): void;
function stencilFunc(func: number, ref: number, mask: number): void;
function stencilOp(fail: number, zfail: number, zpass: number): void;
function depthFunc(func: number): void;
function pixelStoref(pname: number, param: number): void;
function pixelStorei(pname: number, param: number): void;
function readBuffer(mode: number): void;
function readPixels(x: number, y: number, width: number, height: number, format: number, type: number, pixels: Buffer | string | number | number[]): void;
function getBooleanv(pname: number, params: Buffer | string | number | number[]): void;
function getDoublev(pname: number, params: Buffer | string | number | number[]): void;
function getError(): number;
function getFloatv(pname: number, params: Buffer | string | number | number[]): void;
function getIntegerv(pname: number, params: Buffer | string | number | number[]): void;
function getString(name: number): string;
function getTexImage(target: number, level: number, format: number, type: number, pixels: Buffer | string | number | number[]): void;
function getTexParameterfv(target: number, pname: number, params: Buffer | string | number | number[]): void;
function getTexParameteriv(target: number, pname: number, params: Buffer | string | number | number[]): void;
function getTexLevelParameterfv(target: number, level: number, pname: number, params: Buffer | string | number | number[]): void;
function getTexLevelParameteriv(target: number, level: number, pname: number, params: Buffer | string | number | number[]): void;
function isEnabled(cap: number): number;
function depthRange(near: number, far: number): void;
function viewport(x: number, y: number, width: number, height: number): void;
function drawArrays(mode: number, first: number, count: number): void;
function drawElements(mode: number, count: number, type: number, indices: Buffer | string | number | number[]): void;
function polygonOffset(factor: number, units: number): void;
function copyTexImage1D(target: number, level: number, internalformat: number, x: number, y: number, width: number, border: number): void;
function copyTexImage2D(target: number, level: number, internalformat: number, x: number, y: number, width: number, height: number, border: number): void;
function copyTexSubImage1D(target: number, level: number, xoffset: number, x: number, y: number, width: number): void;
function copyTexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, x: number, y: number, width: number, height: number): void;
function texSubImage1D(target: number, level: number, xoffset: number, width: number, format: number, type: number, pixels: Buffer | string | number | number[]): void;
function texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, type: number, pixels: Buffer | string | number | number[]): void;
function bindTexture(target: number, texture: Texture): void;
function genTextures(n: number, textures: number[]): void;
function isTexture(texture: Texture): number;
function blendColor(red: number, green: number, blue: number, alpha: number): void;
function blendEquation(mode: number): void;
function drawRangeElements(mode: number, start: number, end: number, count: number, type: number, indices: Buffer | string | number | number[]): void;
function texImage3D(target: number, level: number, internalformat: number, width: number, height: number, depth: number, border: number, format: number, type: number, pixels: Buffer | string | number | number[]): void;
function texSubImage3D(target: number, level: number, xoffset: number, yoffset: number, zoffset: number, width: number, height: number, depth: number, format: number, type: number, pixels: Buffer | string | number | number[]): void;
function copyTexSubImage3D(target: number, level: number, xoffset: number, yoffset: number, zoffset: number, x: number, y: number, width: number, height: number): void;
function activeTexture(texture: number): void;
function sampleCoverage(value: number, invert: number): void;
function compressedTexImage3D(target: number, level: number, internalformat: number, width: number, height: number, depth: number, border: number, imageSize: number, data: Buffer | string | number | number[]): void;
function compressedTexImage2D(target: number, level: number, internalformat: number, width: number, height: number, border: number, imageSize: number, data: Buffer | string | number | number[]): void;
function compressedTexImage1D(target: number, level: number, internalformat: number, width: number, border: number, imageSize: number, data: Buffer | string | number | number[]): void;
function compressedTexSubImage3D(target: number, level: number, xoffset: number, yoffset: number, zoffset: number, width: number, height: number, depth: number, format: number, imageSize: number, data: Buffer | string | number | number[]): void;
function compressedTexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, imageSize: number, data: Buffer | string | number | number[]): void;
function compressedTexSubImage1D(target: number, level: number, xoffset: number, width: number, format: number, imageSize: number, data: Buffer | string | number | number[]): void;
function getCompressedTexImage(target: number, level: number, img: Buffer | string | number | number[]): void;
function blendFuncSeparate(sfactorRGB: number, dfactorRGB: number, sfactorAlpha: number, dfactorAlpha: number): void;
function multiDrawArrays(mode: number, first: Buffer | string | number | number[], count: Buffer | string | number | number[], drawcount: number): void;
function pointParameterf(pname: number, param: number): void;
function pointParameterfv(pname: number, params: Buffer | string | number | number[]): void;
function pointParameteri(pname: number, param: number): void;
function pointParameteriv(pname: number, params: Buffer | string | number | number[]): void;
function genQueries(n: number, ids: number[]): void;
function isQuery(id: Query): number;
function beginQuery(target: number, id: Query): void;
function endQuery(target: number): void;
function getQueryiv(target: number, pname: number, params: Buffer | string | number | number[]): void;
function getQueryObjectiv(id: Query, pname: number, params: Buffer | string | number | number[]): void;
function getQueryObjectuiv(id: Query, pname: number, params: Buffer | string | number | number[]): void;
function bindBuffer(target: number, buffer: Buffer): void;
function genBuffers(n: number, buffers: number[]): void;
function isBuffer(buffer: Buffer): number;
function bufferData(target: number, size: number, data: Buffer | string | number | number[], usage: number): void;
function bufferSubData(target: number, offset: number, size: number, data: Buffer | string | number | number[]): void;
function getBufferSubData(target: number, offset: number, size: number, data: Buffer | string | number | number[]): void;
function mapBuffer(target: number, access: number): Buffer | string | number | number[];
function unmapBuffer(target: number): number;
function getBufferParameteriv(target: number, pname: number, params: Buffer | string | number | number[]): void;
function blendEquationSeparate(modeRGB: number, modeAlpha: number): void;
function drawBuffers(n: number, bufs: Buffer | string | number | number[]): void;
function stencilOpSeparate(face: number, sfail: number, dpfail: number, dppass: number): void;
function stencilFuncSeparate(face: number, func: number, ref: number, mask: number): void;
function stencilMaskSeparate(face: number, mask: number): void;
function attachShader(program: Program, shader: Shader): void;
function bindAttribLocation(program: Program, index: number, name: string): void;
function compileShader(shader: Shader): void;
function createProgram(): Program;
function createShader(type: number): Shader;
function detachShader(program: Program, shader: Shader): void;
function disableVertexAttribArray(index: number): void;
function enableVertexAttribArray(index: number): void;
function getActiveAttrib(program: Program, index: number, bufSize: number, length: Buffer | string | number | number[], size: Buffer | string | number | number[], type: Buffer | string | number | number[], name: Buffer | string | number | number[]): void;
function getActiveUniform(program: Program, index: number, bufSize: number, length: Buffer | string | number | number[], size: Buffer | string | number | number[], type: Buffer | string | number | number[], name: Buffer | string | number | number[]): void;
function getAttachedShaders(program: Program, maxCount: number, count: Buffer | string | number | number[], shaders: number[]): void;
function getAttribLocation(program: Program, name: string): number;
function getProgramiv(program: Program, pname: number, params: Buffer | string | number | number[]): void;
function getProgramInfoLog(program: Program, bufSize: number, length: Buffer | string | number | number[], infoLog: Buffer | string | number | number[]): void;
function getShaderiv(shader: Shader, pname: number, params: Buffer | string | number | number[]): void;
function getShaderInfoLog(shader: Shader, bufSize: number, length: Buffer | string | number | number[], infoLog: Buffer | string | number | number[]): void;
function getShaderSource(shader: Shader, bufSize: number, length: Buffer | string | number | number[], source: Buffer | string | number | number[]): void;
function getUniformLocation(program: Program, name: string): number;
function getUniformfv(program: Program, location: number, params: Buffer | string | number | number[]): void;
function getUniformiv(program: Program, location: number, params: Buffer | string | number | number[]): void;
function getVertexAttribdv(index: number, pname: number, params: Buffer | string | number | number[]): void;
function getVertexAttribfv(index: number, pname: number, params: Buffer | string | number | number[]): void;
function getVertexAttribiv(index: number, pname: number, params: Buffer | string | number | number[]): void;
function isProgram(program: Program): number;
function isShader(shader: Shader): number;
function linkProgram(program: Program): void;
function useProgram(program: Program): void;
function uniform1f(location: number, v0: number): void;
function uniform2f(location: number, v0: number, v1: number): void;
function uniform3f(location: number, v0: number, v1: number, v2: number): void;
function uniform4f(location: number, v0: number, v1: number, v2: number, v3: number): void;
function uniform1i(location: number, v0: number): void;
function uniform2i(location: number, v0: number, v1: number): void;
function uniform3i(location: number, v0: number, v1: number, v2: number): void;
function uniform4i(location: number, v0: number, v1: number, v2: number, v3: number): void;
function uniform1fv(location: number, count: number, value: Buffer | string | number | number[]): void;
function uniform2fv(location: number, count: number, value: Buffer | string | number | number[]): void;
function uniform3fv(location: number, count: number, value: Buffer | string | number | number[]): void;
function uniform4fv(location: number, count: number, value: Buffer | string | number | number[]): void;
function uniform1iv(location: number, count: number, value: Buffer | string | number | number[]): void;
function uniform2iv(location: number, count: number, value: Buffer | string | number | number[]): void;
function uniform3iv(location: number, count: number, value: Buffer | string | number | number[]): void;
function uniform4iv(location: number, count: number, value: Buffer | string | number | number[]): void;
function uniformMatrix2fv(location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function uniformMatrix3fv(location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function uniformMatrix4fv(location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function validateProgram(program: Program): void;
function vertexAttrib1d(index: number, x: number): void;
function vertexAttrib1dv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttrib1f(index: number, x: number): void;
function vertexAttrib1fv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttrib1s(index: number, x: number): void;
function vertexAttrib1sv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttrib2d(index: number, x: number, y: number): void;
function vertexAttrib2dv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttrib2f(index: number, x: number, y: number): void;
function vertexAttrib2fv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttrib2s(index: number, x: number, y: number): void;
function vertexAttrib2sv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttrib3d(index: number, x: number, y: number, z: number): void;
function vertexAttrib3dv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttrib3f(index: number, x: number, y: number, z: number): void;
function vertexAttrib3fv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttrib3s(index: number, x: number, y: number, z: number): void;
function vertexAttrib3sv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttrib4Nbv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttrib4Niv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttrib4Nsv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttrib4Nub(index: number, x: number, y: number, z: number, w: number): void;
function vertexAttrib4Nubv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttrib4Nuiv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttrib4Nusv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttrib4bv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttrib4d(index: number, x: number, y: number, z: number, w: number): void;
function vertexAttrib4dv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttrib4f(index: number, x: number, y: number, z: number, w: number): void;
function vertexAttrib4fv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttrib4iv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttrib4s(index: number, x: number, y: number, z: number, w: number): void;
function vertexAttrib4sv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttrib4ubv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttrib4uiv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttrib4usv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttribPointer(index: number, size: number, type: number, normalized: number, stride: number, pointer: Buffer | string | number | number[]): void;
function uniformMatrix2x3fv(location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function uniformMatrix3x2fv(location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function uniformMatrix2x4fv(location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function uniformMatrix4x2fv(location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function uniformMatrix3x4fv(location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function uniformMatrix4x3fv(location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function colorMaski(index: number, r: number, g: number, b: number, a: number): void;
function getBooleani_v(target: number, index: number, data: Buffer | string | number | number[]): void;
function getIntegeri_v(target: number, index: number, data: Buffer | string | number | number[]): void;
function enablei(target: number, index: number): void;
function disablei(target: number, index: number): void;
function isEnabledi(target: number, index: number): number;
function beginTransformFeedback(primitiveMode: number): void;
function endTransformFeedback(): void;
function bindBufferRange(target: number, index: number, buffer: number, offset: number, size: number): void;
function bindBufferBase(target: number, index: number, buffer: number): void;
function getTransformFeedbackVarying(W_Program: number, index: number, bufSize: number, length: Buffer | string | number | number[], size: Buffer | string | number | number[], type: Buffer | string | number | number[], name: Buffer | string | number | number[]): void;
function clampColor(target: number, clamp: number): void;
function beginConditionalRender(id: number, mode: number): void;
function endConditionalRender(): void;
function vertexAttribIPointer(index: number, size: number, type: number, stride: number, pointer: Buffer | string | number | number[]): void;
function getVertexAttribIiv(index: number, pname: number, params: Buffer | string | number | number[]): void;
function getVertexAttribIuiv(index: number, pname: number, params: Buffer | string | number | number[]): void;
function vertexAttribI1i(index: number, x: number): void;
function vertexAttribI2i(index: number, x: number, y: number): void;
function vertexAttribI3i(index: number, x: number, y: number, z: number): void;
function vertexAttribI4i(index: number, x: number, y: number, z: number, w: number): void;
function vertexAttribI1ui(index: number, x: number): void;
function vertexAttribI2ui(index: number, x: number, y: number): void;
function vertexAttribI3ui(index: number, x: number, y: number, z: number): void;
function vertexAttribI4ui(index: number, x: number, y: number, z: number, w: number): void;
function vertexAttribI1iv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttribI2iv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttribI3iv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttribI4iv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttribI1uiv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttribI2uiv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttribI3uiv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttribI4uiv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttribI4bv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttribI4sv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttribI4ubv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttribI4usv(index: number, v: Buffer | string | number | number[]): void;
function getUniformuiv(program: Program, location: number, params: Buffer | string | number | number[]): void;
function bindFragDataLocation(program: Program, color: number, name: string): void;
function getFragDataLocation(program: Program, name: string): number;
function uniform1ui(location: number, v0: number): void;
function uniform2ui(location: number, v0: number, v1: number): void;
function uniform3ui(location: number, v0: number, v1: number, v2: number): void;
function uniform4ui(location: number, v0: number, v1: number, v2: number, v3: number): void;
function uniform1uiv(location: number, count: number, value: Buffer | string | number | number[]): void;
function uniform2uiv(location: number, count: number, value: Buffer | string | number | number[]): void;
function uniform3uiv(location: number, count: number, value: Buffer | string | number | number[]): void;
function uniform4uiv(location: number, count: number, value: Buffer | string | number | number[]): void;
function texParameterIiv(target: number, pname: number, params: Buffer | string | number | number[]): void;
function texParameterIuiv(target: number, pname: number, params: Buffer | string | number | number[]): void;
function getTexParameterIiv(target: number, pname: number, params: Buffer | string | number | number[]): void;
function getTexParameterIuiv(target: number, pname: number, params: Buffer | string | number | number[]): void;
function clearBufferiv(buffer: number, drawbuffer: number, value: Buffer | string | number | number[]): void;
function clearBufferuiv(buffer: number, drawbuffer: number, value: Buffer | string | number | number[]): void;
function clearBufferfv(buffer: number, drawbuffer: number, value: Buffer | string | number | number[]): void;
function clearBufferfi(buffer: number, drawbuffer: number, depth: number, stencil: number): void;
function getStringi(name: number, index: number): string;
function drawArraysInstanced(mode: number, first: number, count: number, instancecount: number): void;
function drawElementsInstanced(mode: number, count: number, type: number, indices: Buffer | string | number | number[], instancecount: number): void;
function texBuffer(target: number, internalformat: number, buffer: Buffer): void;
function primitiveRestartIndex(index: number): void;
function getInteger64i_v(target: number, index: number, data: Buffer | string | number | number[]): void;
function getBufferParameteri64v(target: number, pname: number, params: Buffer | string | number | number[]): void;
function framebufferTexture(target: number, attachment: number, texture: Texture, level: number): void;
function vertexAttribDivisor(index: number, divisor: number): void;
function minSampleShading(value: number): void;
function blendEquationi(buf: number, mode: number): void;
function blendEquationSeparatei(buf: number, modeRGB: number, modeAlpha: number): void;
function blendFunci(buf: number, src: number, dst: number): void;
function blendFuncSeparatei(buf: number, srcRGB: number, dstRGB: number, srcAlpha: number, dstAlpha: number): void;
function isRenderbuffer(renderbuffer: Renderbuffer): number;
function bindRenderbuffer(target: number, renderbuffer: Renderbuffer): void;
function genRenderbuffers(n: number, renderbuffers: number[]): void;
function renderbufferStorage(target: number, internalformat: number, width: number, height: number): void;
function getRenderbufferParameteriv(target: number, pname: number, params: Buffer | string | number | number[]): void;
function isFramebuffer(framebuffer: Framebuffer): number;
function bindFramebuffer(target: number, framebuffer: Framebuffer): void;
function genFramebuffers(n: number, framebuffers: number[]): void;
function checkFramebufferStatus(target: number): number;
function framebufferTexture1D(target: number, attachment: number, textarget: number, texture: Texture, level: number): void;
function framebufferTexture2D(target: number, attachment: number, textarget: number, texture: Texture, level: number): void;
function framebufferTexture3D(target: number, attachment: number, textarget: number, texture: Texture, level: number, zoffset: number): void;
function framebufferRenderbuffer(target: number, attachment: number, renderbuffertarget: number, renderbuffer: Renderbuffer): void;
function getFramebufferAttachmentParameteriv(target: number, attachment: number, pname: number, params: Buffer | string | number | number[]): void;
function generateMipmap(target: number): void;
function blitFramebuffer(srcX0: number, srcY0: number, srcX1: number, srcY1: number, dstX0: number, dstY0: number, dstX1: number, dstY1: number, mask: number, filter: number): void;
function renderbufferStorageMultisample(target: number, samples: number, internalformat: number, width: number, height: number): void;
function framebufferTextureLayer(target: number, attachment: number, texture: Texture, level: number, layer: number): void;
function mapBufferRange(target: number, offset: number, length: number, access: number): Buffer | string | number | number[];
function flushMappedBufferRange(target: number, offset: number, length: number): void;
function bindVertexArray(array: VertexArray): void;
function genVertexArrays(n: number, arrays: number[]): void;
function isVertexArray(array: VertexArray): number;
function getActiveUniformsiv(program: Program, uniformCount: number, uniformIndices: Buffer | string | number | number[], pname: number, params: Buffer | string | number | number[]): void;
function getActiveUniformName(program: Program, uniformIndex: number, bufSize: number, length: Buffer | string | number | number[], uniformName: Buffer | string | number | number[]): void;
function getUniformBlockIndex(program: Program, uniformBlockName: Buffer | string | number | number[]): number;
function getActiveUniformBlockiv(program: Program, uniformBlockIndex: number, pname: number, params: Buffer | string | number | number[]): void;
function getActiveUniformBlockName(program: Program, uniformBlockIndex: number, bufSize: number, length: Buffer | string | number | number[], uniformBlockName: Buffer | string | number | number[]): void;
function uniformBlockBinding(program: Program, uniformBlockIndex: number, uniformBlockBinding: number): void;
function copyBufferSubData(readTarget: number, writeTarget: number, readOffset: number, writeOffset: number, size: number): void;
function drawElementsBaseVertex(mode: number, count: number, type: number, indices: Buffer | string | number | number[], basevertex: number): void;
function drawRangeElementsBaseVertex(mode: number, start: number, end: number, count: number, type: number, indices: Buffer | string | number | number[], basevertex: number): void;
function drawElementsInstancedBaseVertex(mode: number, count: number, type: number, indices: Buffer | string | number | number[], instancecount: number, basevertex: number): void;
function provokingVertex(mode: number): void;
function texImage2DMultisample(target: number, samples: number, internalformat: number, width: number, height: number, fixedsamplelocations: number): void;
function texImage3DMultisample(target: number, samples: number, internalformat: number, width: number, height: number, depth: number, fixedsamplelocations: number): void;
function getMultisamplefv(pname: number, index: number, val: Buffer | string | number | number[]): void;
function sampleMaski(index: number, mask: number): void;
function bindFragDataLocationIndexed(program: Program, colorNumber: number, index: number, name: Buffer | string | number | number[]): void;
function getFragDataIndex(program: Program, name: Buffer | string | number | number[]): number;
function genSamplers(count: number, samplers: number[]): void;
function isSampler(sampler: Sampler): number;
function bindSampler(unit: number, sampler: Sampler): void;
function samplerParameteri(sampler: Sampler, pname: number, param: number): void;
function samplerParameteriv(sampler: Sampler, pname: number, param: Buffer | string | number | number[]): void;
function samplerParameterf(sampler: Sampler, pname: number, param: number): void;
function samplerParameterfv(sampler: Sampler, pname: number, param: Buffer | string | number | number[]): void;
function samplerParameterIiv(sampler: Sampler, pname: number, param: Buffer | string | number | number[]): void;
function samplerParameterIuiv(sampler: Sampler, pname: number, param: Buffer | string | number | number[]): void;
function getSamplerParameteriv(sampler: Sampler, pname: number, params: Buffer | string | number | number[]): void;
function getSamplerParameterIiv(sampler: Sampler, pname: number, params: Buffer | string | number | number[]): void;
function getSamplerParameterfv(sampler: Sampler, pname: number, params: Buffer | string | number | number[]): void;
function getSamplerParameterIuiv(sampler: Sampler, pname: number, params: Buffer | string | number | number[]): void;
function queryCounter(id: number, target: number): void;
function getQueryObjecti64v(id: number, pname: number, params: Buffer | string | number | number[]): void;
function getQueryObjectui64v(id: number, pname: number, params: Buffer | string | number | number[]): void;
function vertexAttribP1ui(index: number, type: number, normalized: number, value: number): void;
function vertexAttribP1uiv(index: number, type: number, normalized: number, value: Buffer | string | number | number[]): void;
function vertexAttribP2ui(index: number, type: number, normalized: number, value: number): void;
function vertexAttribP2uiv(index: number, type: number, normalized: number, value: Buffer | string | number | number[]): void;
function vertexAttribP3ui(index: number, type: number, normalized: number, value: number): void;
function vertexAttribP3uiv(index: number, type: number, normalized: number, value: Buffer | string | number | number[]): void;
function vertexAttribP4ui(index: number, type: number, normalized: number, value: number): void;
function vertexAttribP4uiv(index: number, type: number, normalized: number, value: Buffer | string | number | number[]): void;
function drawArraysIndirect(mode: number, indirect: Buffer | string | number | number[]): void;
function drawElementsIndirect(mode: number, type: number, indirect: Buffer | string | number | number[]): void;
function uniform1d(location: number, x: number): void;
function uniform2d(location: number, x: number, y: number): void;
function uniform3d(location: number, x: number, y: number, z: number): void;
function uniform4d(location: number, x: number, y: number, z: number, w: number): void;
function uniform1dv(location: number, count: number, value: Buffer | string | number | number[]): void;
function uniform2dv(location: number, count: number, value: Buffer | string | number | number[]): void;
function uniform3dv(location: number, count: number, value: Buffer | string | number | number[]): void;
function uniform4dv(location: number, count: number, value: Buffer | string | number | number[]): void;
function uniformMatrix2dv(location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function uniformMatrix3dv(location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function uniformMatrix4dv(location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function uniformMatrix2x3dv(location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function uniformMatrix2x4dv(location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function uniformMatrix3x2dv(location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function uniformMatrix3x4dv(location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function uniformMatrix4x2dv(location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function uniformMatrix4x3dv(location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function getUniformdv(program: number, location: number, params: Buffer | string | number | number[]): void;
function getSubroutineUniformLocation(program: Program, shadertype: number, name: Buffer | string | number | number[]): number;
function getSubroutineIndex(program: Program, shadertype: number, name: Buffer | string | number | number[]): number;
function getActiveSubroutineUniformiv(program: Program, shadertype: number, index: number, pname: number, values: Buffer | string | number | number[]): void;
function getActiveSubroutineUniformName(program: Program, shadertype: number, index: number, bufsize: number, length: Buffer | string | number | number[], name: Buffer | string | number | number[]): void;
function getActiveSubroutineName(program: Program, shadertype: number, index: number, bufsize: number, length: Buffer | string | number | number[], name: Buffer | string | number | number[]): void;
function uniformSubroutinesuiv(shadertype: number, count: number, indices: Buffer | string | number | number[]): void;
function getUniformSubroutineuiv(shadertype: number, location: number, params: Buffer | string | number | number[]): void;
function getProgramStageiv(program: Program, shadertype: number, pname: number, values: Buffer | string | number | number[]): void;
function patchParameteri(pname: number, value: number): void;
function patchParameterfv(pname: number, values: Buffer | string | number | number[]): void;
function bindTransformFeedback(target: number, id: TransformFeedback): void;
function genTransformFeedbacks(n: number, ids: number[]): void;
function isTransformFeedback(id: TransformFeedback): number;
function pauseTransformFeedback(): void;
function resumeTransformFeedback(): void;
function drawTransformFeedback(mode: number, id: TransformFeedback): void;
function drawTransformFeedbackStream(mode: number, id: number, stream: number): void;
function beginQueryIndexed(target: number, index: number, id: number): void;
function endQueryIndexed(target: number, index: number): void;
function getQueryIndexediv(target: number, index: number, pname: number, params: Buffer | string | number | number[]): void;
function releaseShaderCompiler(): void;
function shaderBinary(count: number, shaders: number[], binaryformat: number, binary: Buffer | string | number | number[], length: number): void;
function getShaderPrecisionFormat(shadertype: number, precisiontype: number, range: Buffer | string | number | number[], precision: Buffer | string | number | number[]): void;
function depthRangef(n: number, f: number): void;
function clearDepthf(d: number): void;
function getProgramBinary(program: Program, bufSize: number, length: Buffer | string | number | number[], binaryFormat: Buffer | string | number | number[], binary: Buffer | string | number | number[]): void;
function programBinary(program: Program, binaryFormat: number, binary: Buffer | string | number | number[], length: number): void;
function programParameteri(program: Program, pname: number, value: number): void;
function useProgramStages(pipeline: ProgramPipeline, stages: number, program: Program): void;
function activeShaderProgram(pipeline: ProgramPipeline, program: Program): void;
function bindProgramPipeline(pipeline: ProgramPipeline): void;
function genProgramPipelines(n: number, pipelines: number[]): void;
function isProgramPipeline(pipeline: ProgramPipeline): number;
function getProgramPipelineiv(pipeline: ProgramPipeline, pname: number, params: Buffer | string | number | number[]): void;
function programUniform1i(program: Program, location: number, v0: number): void;
function programUniform1iv(program: Program, location: number, count: number, value: Buffer | string | number | number[]): void;
function programUniform1f(program: Program, location: number, v0: number): void;
function programUniform1fv(program: Program, location: number, count: number, value: Buffer | string | number | number[]): void;
function programUniform1d(program: Program, location: number, v0: number): void;
function programUniform1dv(program: Program, location: number, count: number, value: Buffer | string | number | number[]): void;
function programUniform1ui(program: Program, location: number, v0: number): void;
function programUniform1uiv(program: Program, location: number, count: number, value: Buffer | string | number | number[]): void;
function programUniform2i(program: Program, location: number, v0: number, v1: number): void;
function programUniform2iv(program: Program, location: number, count: number, value: Buffer | string | number | number[]): void;
function programUniform2f(program: Program, location: number, v0: number, v1: number): void;
function programUniform2fv(program: Program, location: number, count: number, value: Buffer | string | number | number[]): void;
function programUniform2d(program: Program, location: number, v0: number, v1: number): void;
function programUniform2dv(program: Program, location: number, count: number, value: Buffer | string | number | number[]): void;
function programUniform2ui(program: Program, location: number, v0: number, v1: number): void;
function programUniform2uiv(program: Program, location: number, count: number, value: Buffer | string | number | number[]): void;
function programUniform3i(program: Program, location: number, v0: number, v1: number, v2: number): void;
function programUniform3iv(program: Program, location: number, count: number, value: Buffer | string | number | number[]): void;
function programUniform3f(program: Program, location: number, v0: number, v1: number, v2: number): void;
function programUniform3fv(program: Program, location: number, count: number, value: Buffer | string | number | number[]): void;
function programUniform3d(program: Program, location: number, v0: number, v1: number, v2: number): void;
function programUniform3dv(program: Program, location: number, count: number, value: Buffer | string | number | number[]): void;
function programUniform3ui(program: Program, location: number, v0: number, v1: number, v2: number): void;
function programUniform3uiv(program: Program, location: number, count: number, value: Buffer | string | number | number[]): void;
function programUniform4i(program: Program, location: number, v0: number, v1: number, v2: number, v3: number): void;
function programUniform4iv(program: Program, location: number, count: number, value: Buffer | string | number | number[]): void;
function programUniform4f(program: Program, location: number, v0: number, v1: number, v2: number, v3: number): void;
function programUniform4fv(program: Program, location: number, count: number, value: Buffer | string | number | number[]): void;
function programUniform4d(program: Program, location: number, v0: number, v1: number, v2: number, v3: number): void;
function programUniform4dv(program: Program, location: number, count: number, value: Buffer | string | number | number[]): void;
function programUniform4ui(program: Program, location: number, v0: number, v1: number, v2: number, v3: number): void;
function programUniform4uiv(program: Program, location: number, count: number, value: Buffer | string | number | number[]): void;
function programUniformMatrix2fv(program: Program, location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function programUniformMatrix3fv(program: Program, location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function programUniformMatrix4fv(program: Program, location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function programUniformMatrix2dv(program: Program, location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function programUniformMatrix3dv(program: Program, location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function programUniformMatrix4dv(program: Program, location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function programUniformMatrix2x3fv(program: Program, location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function programUniformMatrix3x2fv(program: Program, location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function programUniformMatrix2x4fv(program: Program, location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function programUniformMatrix4x2fv(program: Program, location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function programUniformMatrix3x4fv(program: Program, location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function programUniformMatrix4x3fv(program: Program, location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function programUniformMatrix2x3dv(program: Program, location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function programUniformMatrix3x2dv(program: Program, location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function programUniformMatrix2x4dv(program: Program, location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function programUniformMatrix4x2dv(program: Program, location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function programUniformMatrix3x4dv(program: Program, location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function programUniformMatrix4x3dv(program: Program, location: number, count: number, transpose: number, value: Buffer | string | number | number[]): void;
function validateProgramPipeline(pipeline: ProgramPipeline): void;
function getProgramPipelineInfoLog(pipeline: ProgramPipeline, bufSize: number, length: Buffer | string | number | number[], infoLog: Buffer | string | number | number[]): void;
function vertexAttribL1d(index: number, x: number): void;
function vertexAttribL2d(index: number, x: number, y: number): void;
function vertexAttribL3d(index: number, x: number, y: number, z: number): void;
function vertexAttribL4d(index: number, x: number, y: number, z: number, w: number): void;
function vertexAttribL1dv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttribL2dv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttribL3dv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttribL4dv(index: number, v: Buffer | string | number | number[]): void;
function vertexAttribLPointer(index: number, size: number, type: number, stride: number, pointer: Buffer | string | number | number[]): void;
function getVertexAttribLdv(index: number, pname: number, params: Buffer | string | number | number[]): void;
function viewportArrayv(first: number, count: number, v: Buffer | string | number | number[]): void;
function viewportIndexedf(index: number, x: number, y: number, w: number, h: number): void;
function viewportIndexedfv(index: number, v: Buffer | string | number | number[]): void;
function scissorArrayv(first: number, count: number, v: Buffer | string | number | number[]): void;
function scissorIndexed(index: number, left: number, bottom: number, width: number, height: number): void;
function scissorIndexedv(index: number, v: Buffer | string | number | number[]): void;
function depthRangeArrayv(first: number, count: number, v: Buffer | string | number | number[]): void;
function depthRangeIndexed(index: number, n: number, f: number): void;
function getFloati_v(target: number, index: number, data: Buffer | string | number | number[]): void;
function getDoublei_v(target: number, index: number, data: Buffer | string | number | number[]): void;